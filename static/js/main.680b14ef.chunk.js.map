{"version":3,"sources":["components/MtgCard/index.js","components/MtgCard/MtgCard.js","App.js","serviceWorker.js","index.js"],"names":["MtgCard","state","face","_this2","this","props","card_faces","react_default","a","createElement","className","name","prices","usd","src","image_uris","png","alt","onMouseOver","setState","React","Component","text","numOfFiles","App","value","cards","file","readTextFile","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","allText","responseText","console","log","send","switchFile","_this","arr","split","index","interval","setInterval","length","clearInterval","fetch","substring","then","response","ok","data","json","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","card","trim","indexOf","err","return","push","cmc","colors","id","Button","variant","color","onClick","window","replace","sum","len","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","type_line","Math","round","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","isNaN","parseFloat","total","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","includes","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","href","download","sort","b","map","i","components_MtgCard","Object","assign","key","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.680b14ef.chunk.js","sourcesContent":["import MtgCard from './MtgCard';\r\n\r\nexport default MtgCard;","import React from 'react';\r\n\r\nimport './MtgCard.css'\r\n\r\nexport default class MtgCard extends React.Component {\r\n\r\n    state = {\r\n        face: 0\r\n    }\r\n\r\n    render() {\r\n        if(this.props.card_faces)\r\n            return (\r\n                <div className='MtgCard'>\r\n                    {this.props.name + \": $\" + this.props.prices.usd}\r\n                    <img src={this.props.card_faces[this.state.face].image_uris.png} alt={this.props.name} onMouseOver={() => this.setState({ face: (this.state.face === 0)? 1: 0 })} />\r\n                </div>\r\n            );\r\n        else\r\n            return (\r\n                <div className='MtgCard'>\r\n                    <span>{this.props.name + \": $\" + this.props.prices.usd}</span>\r\n                    <img src={this.props.image_uris.png} alt={this.props.name}/>\r\n                </div>\r\n            );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport MtgCard from './components/MtgCard';\r\n\r\nimport './App.css';\r\n\r\nlet text = \"\";\r\nconst numOfFiles = 5;\r\n\r\nexport default class App extends React.Component {\r\n\r\n    state = {\r\n        value: \"\",\r\n        cards: [],\r\n        file: numOfFiles,\r\n        numOfFiles: numOfFiles - 1\r\n    };\r\n\r\n    readTextFile = file => {\r\n        var rawFile = new XMLHttpRequest();\r\n        rawFile.open(\"GET\", file, false);\r\n        rawFile.onreadystatechange = () => {\r\n            if (rawFile.readyState === 4) {\r\n                if (rawFile.status === 200 || rawFile.status == 0) {\r\n                    var allText = rawFile.responseText;\r\n                    console.log(\"allText: \", allText);\r\n                    text = allText;\r\n                }\r\n            }\r\n        };\r\n        rawFile.send(null);\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.switchFile();\r\n    }\r\n\r\n    switchFile = () => {\r\n        this.setState({ file: this.state.file%numOfFiles + 1, cards: [] }, () => {\r\n            this.readTextFile(\"./cardlist\" + this.state.file + \".txt\");\r\n            let arr = text.split('\\n');\r\n            console.log(arr);\r\n            let index = 0;\r\n            let interval = setInterval(() => {\r\n                console.log(index)\r\n                if(index >= arr.length) {\r\n                    if(this.state.cards.length == arr.length) {\r\n                        clearInterval(interval);\r\n                        this.setState({});\r\n                    }\r\n                    return;\r\n            }\r\n            let a = arr[index];\r\n            index++;\r\n            fetch(\"https://api.scryfall.com/cards/search?q=\" + a.substring(2)).then(response => {\r\n                if (!response.ok) {\r\n                    console.log(a.substring(2) + \" not found\");\r\n                    return;\r\n                }\r\n                return response;\r\n            }).then(data => (data? data.json() : null)).then(data => {\r\n                if(data) {\r\n                    let index = 0;\r\n                    for(let card of data.data) {\r\n                        if(card.name.trim() === a.substring(2).trim())\r\n                        index = data.data.indexOf(card);\r\n                    }\r\n                    if(index == 0 && data.data[index].name.trim() !== a.substring(2).trim())\r\n                    console.log(data.data[index].name, a.substring(2), data.data[index].name.trim() === a.substring(2).trim());\r\n                    this.state.cards.push(data.data[index]);\r\n                } else {\r\n                    this.state.cards.push({ name: \"Not Found\", prices: {}, cmc: 0, image_uris: { png: \"test.png\" }, colors: [] });\r\n                }\r\n            });\r\n        }, 10)});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div id=\"utilTest\">\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" onClick={() => {\r\n                        window.open(\"https://store.tcgplayer.com/massentry?c=\"+text.replace(/\\n/g, '||'));\r\n                    }}>Buy</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\">Number of Cards: {this.state.cards.length}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Average CMC: {(() => {\r\n                        let sum = 0;\r\n                        let len = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.type_line && card.type_line.indexOf(\"Land\") === -1) {\r\n                                sum += card.cmc;\r\n                                len++;\r\n                            }\r\n                        }\r\n                        return Math.round(100*sum / len) / 100.0;\r\n                    })()} </Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Total Cost: {(() => {\r\n                        let sum = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(isNaN(parseFloat(card.prices.usd)))\r\n                                console.log(card);\r\n                            else\r\n                                sum += parseFloat(card.prices.usd);\r\n                        }\r\n                        return Math.round(100*sum) / 100.0;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >White: {(() => {\r\n                        let total = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.colors.includes(\"W\"))\r\n                                total++;\r\n                        }\r\n                        return total;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Blue: {(() => {\r\n                        let total = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.colors.includes(\"U\"))\r\n                                total++;\r\n                        }\r\n                        return total;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Black: {(() => {\r\n                        let total = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.colors.includes(\"B\"))\r\n                                total++;\r\n                        }\r\n                        return total;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Red: {(() => {\r\n                        let total = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.colors.includes(\"R\"))\r\n                                total++;\r\n                        }\r\n                        return total;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" >Green: {(() => {\r\n                        let total = 0;\r\n                        for(let card of this.state.cards) {\r\n                            if(card.colors.includes(\"G\"))\r\n                                total++;\r\n                        }\r\n                        return total;\r\n                    })()}</Button>\r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\" onClick={this.switchFile}>File: {this.state.file}</Button> \r\n                    <Button id=\"btnTest\" variant=\"contained\" color=\"primary\"><a href={\"./cardlist\" + this.state.file + \".txt\"} download>Download</a></Button> \r\n                </div>\r\n                <div id=\"cardsTest\">\r\n                    {this.state.cards.sort((a, b) => {\r\n                        if(a.cmc === b.cmc)\r\n                            return a.name > b.name? 1: b.name > a.name? -1 : 0;\r\n                        else if(a.cmc === 0 && b.cmc === 0)\r\n                            return 0;\r\n                        else if(a.cmc === 0)\r\n                            return 1;\r\n                        else if(b.cmc === 0)\r\n                            return -1;\r\n                        return a.cmc - b.cmc\r\n                    }).map((value, i) => (\r\n                        <MtgCard key={i} {...value} />\r\n                    ))}\r\n                </div>\r\n             </div>\r\n        );\r\n    }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}